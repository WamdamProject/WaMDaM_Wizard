#!/usr/bin/python
# -*- coding: utf-8 -*-

"""Subclass of dlg_VisulaizeWaMDaM, which is generated by wxFormBuilder."""

from viewer.Publish_Viz import Publish_Viz
from controller.ConnectDB_ParseExcel import DB_Setup
from viewer.Messages_forms.msg_somethigWrong import msg_somethigWrong
from controller.OpenAgua.Upload.UploadWaMDaM_SQLite_ToOpenAgua import UploadToOpenAgua

from controller.wamdamAPI.GetResourceStructure import GetResourceStructure
from controller.wamdamAPI.GetInstancesByScenario import GetInstancesBySenario

from controller.OpenAgua.Download.NewOA2 import Hydra_OA


# Implementing dlg_VisulaizeWaMDaM
class dlg_VisulaizeWaMDaM( Publish_Viz.dlg_VisulaizeWaMDaM ):
	def __init__( self, parent ):
		Publish_Viz.dlg_VisulaizeWaMDaM.__init__( self, parent )

		if self.checkConnectingToSqlite():
			# self.m_textCtrl11.Value = 'amabdallah@aggiemail.usu.edu'
			# self.m_textCtrl12.Value = 'OApass1'
			self.userName = self.m_textCtrl11.Value
			self.password = self.m_textCtrl12.Value

		else:
			msg = "Warning: Please connect to sqlite."
			msg_somethigWrong(self, msg).ShowModal()
			self.Destroy()

	def hydra(self):
		endpoint = 'https://www.openagua.org/api/v1/hydra/'

		return Hydra_OA(endpoint,self.m_textCtrl11.Value, self.m_textCtrl12.Value)


	# Handlers for dlg_VisulaizeWaMDaM events.
	def Btn_LoginOnButtonClick( self, event ):
		# TODO: Implement Btn_LoginOnButtonClick

		try:
			self.userName = self.m_textCtrl11.Value
			self.password = self.m_textCtrl12.Value


			if not self.m_textCtrl11.Value or not self.m_textCtrl12.Value:
				raise Exception("Provide a username and password")

			self.usern = self.m_textCtrl11.Value
			self.passw = self.m_textCtrl12.Value


			projects = self.hydra()._call('get_projects')
			project_names = []

			for p in projects:
				project_names.append(str(p['name']))

			self.m_SelectProject.SetItems(project_names)

			self.dataStructure = GetResourceStructure()

			self.datasets = self.dataStructure.GetResourceType()

			list_acromy = list()

			for index, row in self.datasets.iterrows():
				list_acromy.append(row[0])

			if list_acromy.__len__() > 0:
				self.m_SelectModel.SetItems(list_acromy)

		except Exception as e:
			messageDlg = msg_somethigWrong(None, msg=e.args[0])
			messageDlg.Show()




	# Handlers for dlg_VisulaizeWaMDaM events.
	def btn_UploadToOpenAguaOnButtonClick( self, event ):
		# TODO: Implement btn_UploadToOpenAguaOnButtonClick

		userName = self.m_textCtrl11.Value
		password = self.m_textCtrl12.Value

		try:
			projectName = self.m_textCtrl7.Value
			if not projectName:
				if self.m_SelectProject.Value == "":
					raise Exception("Provide an OpenAgua project name")
				else:
					projectName = self.m_SelectProject.Value
			else:
				if self.m_SelectProject.Value != "":
					raise Exception("Select only an OpenAgua project name")


			selectedResourceTypeAcro = self.m_SelectModel.Value
			if not selectedResourceTypeAcro:
				raise Exception("Select a Model")

			selectedMasterNetworkName = self.m_SelectNetwork.Value
			if not selectedResourceTypeAcro:
				raise Exception("Select a Network")

			if self.SelectScenario.GetSelectedItemCount() < 1:
				raise Exception("Select a Scenario")

			index = self.SelectScenario.GetFirstSelected()
			selectedScenarioNames = []

			while index != -1:
				item = self.SelectScenario.GetItem(itemId=index)
				selectedScenarioName = item.GetText()
				# store the many selected scenarios into a dict? then pass them for the for loop
				selectedScenarioNames.append(selectedScenarioName)
				# do something with the items
				index = self.SelectScenario.GetNextSelected(index)


			# add project here? then just pass its  my_new_project.id to the controller

			UploadToOpenAgua(selectedResourceTypeAcro, selectedMasterNetworkName, selectedScenarioNames, projectName, userName, password)

			from viewer.Messages_forms.msg_connSQLiteSuccs import msg_connSQLiteSuccs
			msgdlg = msg_connSQLiteSuccs(self)
			msgdlg.setMessage("\n\nSuccessfully, Uploaded the model to OpenAgua  file.")
			msgdlg.ShowModal()

			self.Destroy()

		except Exception as e:
			# pass
			msg_somethigWrong(self, e.args[0]).ShowModal()


	def btn_cancelOnButtonClick( self, event ):
		# TODO: Implement btn_cancelOnButtonClick
		self.Destroy()


	def m_SelectProjectOnCombobox( self, event ):
		# TODO: Implement m_SelectProjectOnCombobox
		pass




	def m_SelectModelOnCombobox( self, event ):
		selectedDataset = self.m_SelectModel.Value
		result = GetInstancesBySenario()
		datas = result.GetMasterNetworks(selectedDataset)
		GotMasterNetworkNames = []
		for index, row in datas.iterrows():
			GotMasterNetworkNames.append(row[0])
		self.m_SelectNetwork.SetItems(GotMasterNetworkNames)

	def m_SelectNetworkOnCombobox( self, event ):
		selectedMasterNetworkName = self.m_SelectNetwork.Value
		result = GetInstancesBySenario()
		datas = result.GetScenarios(self.m_SelectModel.Value, selectedMasterNetworkName)
		GotScenarioNames = []
		self.SelectScenario.DeleteAllItems()
		for index, row in datas.iterrows():
			self.SelectScenario.InsertStringItem(index, row[0])
			GotScenarioNames.append(row[0])
		# self.SelectScenario.Append(GotScenarioNames)



	def checkConnectingToSqlite(self):
		db_setup = DB_Setup()
		if not db_setup.get_session():
			return False
		return True

	def SelectScenarioOnListBeginDrag(self, event):
		# TODO: Implement SelectScenarioOnListBeginDrag
		pass

	def SelectScenarioOnListBeginLabelEdit(self, event):
		# TODO: Implement SelectScenarioOnListBeginLabelEdit
		pass

	def SelectScenarioOnListBeginRDrag(self, event):
		# TODO: Implement SelectScenarioOnListBeginRDrag
		pass

	def SelectScenarioOnListCacheHint(self, event):
		# TODO: Implement SelectScenarioOnListCacheHint
		pass

	def SelectScenarioOnListColBeginDrag(self, event):
		# TODO: Implement SelectScenarioOnListColBeginDrag
		pass

	def SelectScenarioOnListColClick(self, event):
		# TODO: Implement SelectScenarioOnListColClick
		pass

	def SelectScenarioOnListColDragging(self, event):
		# TODO: Implement SelectScenarioOnListColDragging
		pass

	def SelectScenarioOnListColEndDrag(self, event):
		# TODO: Implement SelectScenarioOnListColEndDrag
		pass

	def SelectScenarioOnListColRightClick(self, event):
		# TODO: Implement SelectScenarioOnListColRightClick
		pass

	def SelectScenarioOnListDeleteAllItems(self, event):
		# TODO: Implement SelectScenarioOnListDeleteAllItems
		pass

	def SelectScenarioOnListDeleteItem(self, event):
		# TODO: Implement SelectScenarioOnListDeleteItem
		pass

	def SelectScenarioOnListEndLabelEdit(self, event):
		# TODO: Implement SelectScenarioOnListEndLabelEdit
		pass

	def SelectScenarioOnListInsertItem(self, event):
		# TODO: Implement SelectScenarioOnListInsertItem
		pass

	def SelectScenarioOnListItemActivated(self, event):
		# TODO: Implement SelectScenarioOnListItemActivated
		pass

	def SelectScenarioOnListItemDeselected(self, event):
		# TODO: Implement SelectScenarioOnListItemDeselected
		pass

	def SelectScenarioOnListItemFocused(self, event):
		# TODO: Implement SelectScenarioOnListItemFocused
		pass

	def SelectScenarioOnListItemMiddleClick(self, event):
		# TODO: Implement SelectScenarioOnListItemMiddleClick
		pass

	def SelectScenarioOnListItemRightClick(self, event):
		# TODO: Implement SelectScenarioOnListItemRightClick
		pass

	def SelectScenarioOnListItemSelected(self, event):
		# TODO: Implement SelectScenarioOnListItemSelected
		pass

	def SelectScenarioOnListKeyDown(self, event):
		# TODO: Implement SelectScenarioOnListKeyDown
		pass

