"""Subclass of dlg_ImportFromOpenAgua, which is generated by wxFormBuilder."""
# -*- coding: utf-8 -*-

from viewer.Publish_Viz import Publish_Viz
from viewer.Messages_forms.msg_somethigWrong import msg_somethigWrong
import unicodedata

# import WaMDaMWizard

# Used for working with files.
# from Messages_forms.msg_somethigWrong import msg_somethigWrong

from controller.OpenAgua.Download.ImportFromOpenAgua_ToWaMDaM import ImportData
from pandas.io.json import json_normalize

import requests
import json

from controller.OpenAgua.Download.NewOA2 import Hydra_OA

from viewer.Publish_Viz.Oa_new_connect import Hydra


# Implementing dlg_ImportFromOpenAgua
class dlg_ImportFromOpenAgua( Publish_Viz.dlg_ImportFromOpenAgua ):
    def __init__( self, parent ):
        Publish_Viz.dlg_ImportFromOpenAgua.__init__( self, parent )

        # self.m_textCtr_username.Value = 'amabdallah@aggiemail.usu.edu'
        # self.m_textCtrl_pass.Value = 'OApass1'
        self.usern=self.m_textCtr_username.Value
        self.passw=self.m_textCtrl_pass.Value
    # Handlers for dlg_ImportFromOpenAgua events.
        self.conn = None
        self.path = None
        self.hydra_instance = None
        # -----------------------------------------------------------------------------

    def hydra(self):
        if not self.hydra_instance:
            endpoint = 'https://www.openagua.org/api/v1/hydra/'
            self.hydra_instance = Hydra_OA(endpoint, self.m_textCtr_username.Value, self.m_textCtrl_pass.Value)
        return self.hydra_instance


    def m_connectOnButtonClick( self, event ):
        # TODO: Implement m_connectOnButtonClick
        try:

            if not self.m_textCtr_username.Value or not self.m_textCtrl_pass.Value:
                raise Exception("Provide a username and password")

            self.usern = self.m_textCtr_username.Value
            self.passw = self.m_textCtrl_pass.Value


            projects = self.hydra()._call('get_projects')
            project_names = []
            self.project_ids = {}

            for p in projects:
                project_names.append(str(p['name']))
                self.project_ids[str(p['name'])] = p['id']

            self.m_SelectProject.SetItems(project_names)

        except Exception as e:
            messageDlg = msg_somethigWrong(None, msg=e.args[0])
            messageDlg.Show()


    # so the GUI shows them like this
    # Project Name >> Model (template) name >>> NEtwork >>> Scenario
    # but the API gets them like this
    # Project Name >> NEtwork >> template >> scenario


    # Handlers for dlg_ImportFromOpenAgua events.
    def m_SelectProjectOnCombobox( self, event ):
        # based on the selected project (name), pass that selected projet id to this function below
        if self.m_SelectProject.Value:
            project_id = self.project_ids[self.m_SelectProject.Value]

            GetNetworks_metadata = self.hydra().call('get_networks', {'project_id': project_id, 'include_values': 'N'})

            GetNetworks_metadata_df = json_normalize(GetNetworks_metadata)

            # store a dict for all the networks and their template names and IDs to use later for filtering and filling combox boxes


            self.NetworkName_list = GetNetworks_metadata_df['name'].tolist()
            self.Network_id_list = GetNetworks_metadata_df['id'].tolist()

            self.m_SelectNetwork.SetItems(self.NetworkName_list)

            TemplateName_list = []

            self.template_id_list = {}
            for network in GetNetworks_metadata:
                active_template_id = network['layout']['active_template_id']
                # get the templates based on the network active template id inside.
                Template = self.hydra().call('get_template', {'template_id': int(active_template_id)})


                if not Template['name'] in TemplateName_list:
                    TemplateName_list.append(Template['name'])
                    self.template_id_list[Template['name']] = Template['id']

                    self.GlobalAttributesID= network['types'][0]['id']
                    # Then return the GlobalAttributesID into the controller

            self.m_SelectModel.SetItems(TemplateName_list)

            self.m_selectScenario.SetItems([])
    def m_SelectModelOnCombobox( self, event ):
        # TODO: Implement m_SelectModelOnCombobox
        pass
        # fill out the combox box of all the templates inside the selected project earlier

    def m_SelectNetworkOnCombobox( self, event ):
        # TODO: Implement m_SelectNetworkOnCombobox
        if self.m_SelectNetwork.Value :
            Network_id = self.Network_id_list[self.NetworkName_list.index(self.m_SelectNetwork.Value)]


            Get_scenarios_metadata = self.hydra().call('get_scenarios', {'network_id': Network_id, 'include_values': 'N'})

            Get_scenarios_metadata_df = json_normalize(Get_scenarios_metadata)

            # Look up the parent scenario
            # Children={}
            ParentScenario = []
            ParentScenario_ID = []

            for row in Get_scenarios_metadata_df.iterrows():
                if row[1]['layout.class']=='baseline':
                    parent_scenario = row[1]['name']
                    parent_scenario_id = row[1]['id']

                    # Children_Id=row[1]['layout.chidren']
                    # Children_name=row[1]['name']
                    # Children_description=row[1]['description']
                    # Children[row[1]['id']] = {'ids': Children_Id, 'description': Children_description, 'name':Children_name}

                    unicodedata.normalize('NFKD', parent_scenario).encode('ascii', 'ignore')
                    ParentScenario.append(parent_scenario)
                    ParentScenario_ID.append(row[1]['id'])


            # unicodedata.normalize('NFKD', ParentScenario_ID).encode('ascii', 'ignore')

            self.ScenarioName_list = ParentScenario
            self.ScenarioName_id_list =ParentScenario_ID
            self.m_selectScenario.SetItems(self.ScenarioName_list)


    def m_selectScenarioOnCombobox( self, event ):
        # TODO: Implement m_selectScenarioOnCombobox
        pass

    def m_dirPicker_exportOnDirChanged( self, event ):
        valid_extension = ['xls', 'xlsx']
        self.path = self.m_dirPicker_export.GetPath()


    def btn_ImportOnButtonClick( self, event ):
        # try:
            if not self.m_SelectProject:
                raise Exception("Select a project")

            if not self.m_SelectModel.Value:
                raise  Exception("Select a model")

            if not self.m_SelectNetwork.Value :
                raise Exception("Select a Network")

            if not self.m_selectScenario.Value:
                raise Exception("Select a scenario")

            if not self.path:
                raise Exception("Select a dir to export file into")

            ProName = self.m_SelectProject.Value
            NetName = self.m_SelectNetwork.Value
            ScenName = self.m_selectScenario.Value

            file_name_to_export = "{}_{}_{}".format(ProName, NetName, ScenName)
            export_path = "{}/{}.xlsx".format(self.path, file_name_to_export)

            network_id = self.Network_id_list[self.NetworkName_list.index(self.m_SelectNetwork.Value)]
            scenario_id = self.ScenarioName_id_list[self.ScenarioName_list.index(self.m_selectScenario.Value)]
            model_id = self.template_id_list[self.m_SelectModel.Value]
            ImportData(self.hydra(),model_id, network_id, scenario_id, export_path, self.GlobalAttributesID, self.usern, self.passw)

            from viewer.Messages_forms.msg_successLoadDatabase import msg_successLoadDatabase
            instance = msg_successLoadDatabase(None)
            instance.m_staticText1.SetLabel("Successfully exported the data into the Excel template")
            instance.ShowModal()
            # self.btn_Export_ScenarioData.Enabled = True
            self.Destroy()



    def btn_cancelOnButtonClick( self, event ):
        # TODO: Implement btn_cancelOnButtonClick
        self.Close()


