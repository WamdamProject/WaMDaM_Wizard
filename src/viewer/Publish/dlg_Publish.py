"""Subclass of dlg_Publish, which is generated by wxFormBuilder."""

import wx
import Publish_Viz
from controller.ConnectDB_ParseExcel import DB_Setup
from viewer.Messages_forms.msg_somethigWrong import msg_somethigWrong

from controller.HydroShare.PublishWaMDaM import publishOnHydraShare
# Implementing dlg_Publish
class dlg_Publish( Publish_Viz.dlg_Publish ):
	def __init__( self, parent ):
		Publish_Viz.dlg_Publish.__init__( self, parent )

		self.m_textCtrl7.Value = 'xxxxx'
		self.m_textCtrl8.Value = 'xxx'
	
	# Handlers for dlg_Publish events.
	def btn_PublishOnButtonClick( self, event ):
		self.btn_Publish.Enabled = False
		# TODO: Implement btn_PublishOnButtonClick
		if not self.checkConnectingToSqlite():
			msg = "\n\nWarning: Please connect to sqlite first."
			msg_somethigWrong(self, msg).Show()
		else:
			err_msg = self.checkValidatingOfUserInformation()
			if err_msg != '':
				msg_somethigWrong(self, err_msg).Show()
			else:
				userName = self.m_textCtrl7.Value
				password = self.m_textCtrl8.Value

				db_setup = DB_Setup()
				fullPathOfSqlite = db_setup.get_dbpath()

				return_value = publishOnHydraShare(userName, password, fullPathOfSqlite)
				if return_value:
					from viewer.Messages_forms.msg_connSQLiteSuccs import msg_connSQLiteSuccs
					msgdlg = msg_connSQLiteSuccs(self)
					msgdlg.setMessage("\n\nSuccessfully, Uploaded Sqlite file.")
					msgdlg.ShowModal()

					self.Destroy()
				else:
					msg_somethigWrong(self,
									  msg='\n\nError: Sorry, Failed uploading of sqlite file.').Show()
				self.btn_Publish.Enabled = True
		pass
	
	def btn_cancelOnButtonClick( self, event ):
		# TODO: Implement btn_cancelOnButtonClick
		self.Destroy()

	# this function is to check if user name or password id empty
	def checkValidatingOfUserInformation(self):
		userName = self.m_textCtrl7.Value
		password = self.m_textCtrl8.Value
		msg = ''
		if not userName or userName == '' or not password or password == '':
			msg = '\n\nError: User name or Password can not be empty.\n Please input user name and password.'
		return msg

	#this function is to check if connecting to sqlite.
	def checkConnectingToSqlite(self):
		db_setup = DB_Setup()
		if not db_setup.get_session():
			return False
		return True

	
	
