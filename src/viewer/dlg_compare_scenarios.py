"""Subclass of dlg_compare_scenarios, which is generated by wxFormBuilder."""

import wx
import WaMDaMWizard
from controller.wamdamAPI.GetResourceStructure import GetResourceStructure
from controller.wamdamAPI.GetInstancesByScenario import *
from controller.ConnectDB_ParseExcel import DB_Setup
from Messages_forms.msg_loading import msg_loading

from controller.wamdamAPI.GetComapreScenarios import GetComapreScenarios
from xlrd import open_workbook
# from xlutils.copy import copy
from Messages_forms.msg_somethigWrong import msg_somethigWrong
# This library is used here to write data to an excel file
from openpyxl import load_workbook

# Implementing dlg_compare_scenarios
class dlg_compare_scenarios( WaMDaMWizard.dlg_compare_scenarios ):
	def __init__( self, parent ):
		WaMDaMWizard.dlg_compare_scenarios.__init__( self, parent )

		self.path = ''
		try:
			if not self.checkConnectingToSqlite():
				msg = "\n\nWarning: Please connect to sqlite first."
				raise Exception(msg)

			''' init model combobox'''
			self.dataStructure = GetResourceStructure()
			self.instances = GetInstancesBySenario()
			self.datasets = self.dataStructure.GetResourceType()
			self.compareScenarios = GetComapreScenarios()
			
			list_acromy = list()
			for index, row in self.datasets.iterrows():
				list_acromy.append(row["ResourceTypeAcronym"])
			if list_acromy.__len__() > 0:
				self.comboBox_selectModel.SetItems(list_acromy)
		except Exception as e:
			message = msg_somethigWrong(None, msg=e.message)
			message.ShowModal()
			self.Destroy()

	# Handlers for dlg_compare_scenarios events.
	def comboBox_selectModelOnCombobox( self, event ):
		''' init network combobox once model combobox change'''
		selectedDataset = self.comboBox_selectModel.Value
		result = GetInstancesBySenario()
		gotMasterNetwork =result.GetMasterNetworks(selectedDataset)
		list_Networks = list()
		for index, row in gotMasterNetwork.iterrows():
			list_Networks.append(row["MasterNetworkName"])
		if list_Networks.__len__() > 0:
			self.comboBox_selectNetwork.SetItems(list_Networks)


	def comboBox_selectNetworkOnCombobox( self, event ):
		''' init first scenario combobox once network combobox change'''
		selectedMasterNetworkName = self.comboBox_selectNetwork.Value
		selectedDataset = self.comboBox_selectModel.Value
		result = GetInstancesBySenario()
		gotScenarioNames = result.GetScenarios(selectedDataset, selectedMasterNetworkName)

		list_Scenarios = list()
		for index, row in gotScenarioNames.iterrows():
			list_Scenarios.append(row["ScenarioName"])

		if gotScenarioNames.__len__() <= 0:
			return
		self.comboBox_selectScenario1.SetItems(list_Scenarios)


	def comboBox_selectScenario1OnCombobox( self, event ):
		''' init second scenario combobox once first scenario change'''
		selectedMasterNetworkName = self.comboBox_selectNetwork.Value
		selectedDataset = self.comboBox_selectModel.Value
		result = GetInstancesBySenario()
		gotScenarios = result.GetScenarios(selectedDataset, selectedMasterNetworkName)

		list_Scenarios = list()
		for index, row in gotScenarios.iterrows():
			list_Scenarios.append(row["ScenarioName"])

		if list_Scenarios.__len__() <= 0:
			return
		selected_scenario1 = self.comboBox_selectScenario1.Value
		selected_index = list_Scenarios.index(selected_scenario1)
		list_Scenarios.pop(selected_index)
		self.comboBox_selectScenario2.SetItems(list_Scenarios)
		pass

	def comboBox_selectScenario2OnCombobox( self, event ):
		# TODO: Implement comboBox_selectScenario2OnCombobox
		pass

	def FilePicker_compareScenariosOnFileChanged( self, event ):
		valid_extension = ['xlsx']
		self.path = self.FilePicker_compareScenarios.GetPath()
		if not (self.path.split('.')[-1] in valid_extension):
			message = msg_somethigWrong(None, msg="Please select a valid Excel File")
			message.ShowModal()
			return
		print 'This is working just fine...'
		print self.path
		book2 = load_workbook(self.path)
		# bring all the checks below to up here?
		sheetnames = ["ChangeInTopology", "ChangeInMetadata_Topology", "ChangeInMetadata_Attributes", "ChangeInValues"]
		for name in sheetnames:
			if not name in book2.sheetnames:
				book2.close()
				message = msg_somethigWrong(None, msg="Please select a valid Excel File")
				message.ShowModal()
				return

		book2.close()



	def btn_compare_scenariosOnButtonClick( self, event ):
		self.btn_compare_scenarios.Enabled = False


		''' Get selected data(Dataset, MasterNetworkName, ScenarioName1, ScenarioName2) '''
		selectedDataset = self.comboBox_selectModel.Value
		selectedMasterNetworkName = self.comboBox_selectNetwork.Value
		selectedScenarioName1 = self.comboBox_selectScenario1.Value
		selectedScenarioName2 = self.comboBox_selectScenario2.Value




		''' Check if needed names are correctly selected '''
		message = ''
		if (selectedDataset == None or selectedDataset == ''):
			message = 'Select the model name in WamDam.'
		elif selectedMasterNetworkName == None or selectedMasterNetworkName == '':
			message = 'Select the MasterNetworkName.'
		elif selectedScenarioName1 == None or selectedScenarioName1 == '':
			message = 'Select the ScenarioName1.'
		elif selectedScenarioName2 == None or selectedScenarioName2 == '':
			message = 'Select the ScenarioName2.'
		elif not ['xlsx'].__contains__(self.path.split('.')[-1]):
			message = 'please select a valid excel file.'

		'''if warning message exists, then show msg dialog and return.'''
		if message != '':
			messageDlg = msg_somethigWrong(None, msg=message)
			messageDlg.Show()
			return


		''' Get data for changed topology by selected scenarios'''
		resultData = self.compareScenarios.GetComapreScenarios(selectedDataset, selectedMasterNetworkName,selectedScenarioName1, selectedScenarioName2)
		unique1ResultData = self.compareScenarios.GetUniqueTopology_Scenario2(selectedDataset, selectedMasterNetworkName,selectedScenarioName1, selectedScenarioName2)
		unique2ResultData = self.compareScenarios.GetUniqueTopology_Scenario1(selectedDataset, selectedMasterNetworkName,selectedScenarioName1, selectedScenarioName2)
		commonResultData = self.compareScenarios.GetCommonTopology(selectedDataset, selectedMasterNetworkName,selectedScenarioName1, selectedScenarioName2)

		i = 0
		k = 0

		''' in data for changed topology, pop common data '''
		for i in range(0, len(unique1ResultData)):
			unique1Data = unique1ResultData[i-k]
			j = 0
			isSame = False
			for unique2Data in unique2ResultData:
				if unique1Data[0] == unique2Data[0] and unique1Data[1] == unique2Data[1] and unique1Data[2] == unique2Data[2]:
					isSame = True
					break
				j += 1
			if isSame:
				unique1ResultData.pop(i-k)
				unique2ResultData.pop(j)
				k += 1

		''' pop common data in union result'''
		i = 0
		k = 0
		for i in range(0, len(commonResultData)):
			unique1Data = commonResultData[i-k]
			j = 0
			isSame = False
			for unique2Data in unique2ResultData:
				if unique1Data[0] == unique2Data[0] and unique1Data[1] == unique2Data[1] and unique1Data[2] == unique2Data[2]:
					isSame = True
					break
			if not isSame:
				for unique1Data0 in unique1ResultData:
					if unique1Data[0] == unique1Data0[0] and unique1Data[1] == unique1Data0[1] and unique1Data[2] == unique1Data0[2]:
						isSame = True
						break

			if isSame:
				commonResultData.pop(i-k)
				k += 1


		'''get changed metadata'''
		changeInMetadataList = self.compareScenarios.GetChangeInMetadata_Topology(selectedDataset, selectedMasterNetworkName,selectedScenarioName1, selectedScenarioName2)

		# print the result to this excel sheet: ChangeInMetadata_Attributes
		changeInMetadataValueList = self.compareScenarios.GetChangeInMetaValues_Attributes(selectedDataset, selectedMasterNetworkName,selectedScenarioName1, selectedScenarioName2)

		''' init metadata'''
		changeInMetadataList_result = []

		firstScenarioCount = 0
		commonScenarioCount = 0
		secondScenarioCount = 0
		totalcount = 0

		for unique1Data in changeInMetadataList:
			j = 0
			isSame = False
			for row in changeInMetadataList_result:
				if unique1Data[0] == row[0] and unique1Data[1] == row[1] and unique1Data[2] == row[2] and unique1Data[3] == row[3]:
					isSame = True
					if unique1Data[4] != row[4]:
						if len (changeInMetadataList_result[j]) == 12:
							'''second senario data append'''
							changeInMetadataList_result[j][9] = unique1Data[4]
							changeInMetadataList_result[j][10] = unique1Data[5]
							changeInMetadataList_result[j][11] = unique1Data[6]
						else:
							changeInMetadataList_result[j].append(unique1Data[4])
							changeInMetadataList_result[j].append(unique1Data[5])
							changeInMetadataList_result[j].append(unique1Data[6])
				j += 1
			if not isSame:
				changeInMetadataList_result.append(unique1Data)

			firstScenarioCount = len(unique2ResultData)
			secondScenarioCount = len(unique1ResultData)
			commonScenarioCount = len(commonResultData)
			totalcount = firstScenarioCount + secondScenarioCount + commonScenarioCount

		''' print the result to this excel sheet: ChangeInMetadata_Attributes '''

		changeInMetadataAttributeList_result = []
		for unique1Data in changeInMetadataValueList:
			j = 0
			isSame = False
			for row in changeInMetadataAttributeList_result:
				if unique1Data[0] == row[0] and unique1Data[1] == row[1] and unique1Data[2] == row[2] and unique1Data[3] == row[3]:
					isSame = True
					if unique1Data[5] != row[5]:
						if len (changeInMetadataAttributeList_result[j]) > 11:
							'''second senario data append'''
							changeInMetadataAttributeList_result[j][10] = unique1Data[5]
							changeInMetadataAttributeList_result[j][11] = unique1Data[6]
							changeInMetadataAttributeList_result[j][12] = unique1Data[7]
						else:
							changeInMetadataAttributeList_result[j].append(unique1Data[5])
							changeInMetadataAttributeList_result[j].append(unique1Data[6])
							changeInMetadataAttributeList_result[j].append(unique1Data[7])
				j += 1
			if not isSame:
				changeInMetadataAttributeList_result.append(unique1Data)


		print '**************'
		try:
			if self.path.split('.')[-1] == 'xlsx':
				book2 = load_workbook(self.path)
				additionsToTopologySheet = book2["ChangeInTopology"]
				changeInMetadataToTopologySheet = book2["ChangeInMetadata_Topology"]
				changeInMetavaluesTopologySheet = book2["ChangeInMetadata_Attributes"]
				changeInValuesSheet = book2["ChangeInValues"]


				additionsToTopologySheet.cell(row=3, column=2, value=firstScenarioCount)
				additionsToTopologySheet.cell(row=3, column=5, value=commonScenarioCount)
				additionsToTopologySheet.cell(row=3, column=8, value=secondScenarioCount)
				additionsToTopologySheet.cell(row=4, column=2, value=str(round(float(firstScenarioCount)/float(1 if totalcount == 0 else totalcount), 3)* 100.0) + "%")
				additionsToTopologySheet.cell(row=4, column=5, value=str(round(float(commonScenarioCount)/float(1 if totalcount == 0 else totalcount), 3)* 100.0) + "%")
				additionsToTopologySheet.cell(row=4, column=8, value=str(round(float(secondScenarioCount)/float(1 if totalcount == 0 else totalcount), 3)* 100.0) + "%")
				rowNumber = 7
				for row_id, row in enumerate(unique2ResultData):
					for col_id, cell in enumerate(row):
						additionsToTopologySheet.cell(row= rowNumber, column=col_id + 1, value=cell)
					rowNumber += 1


				for row_id, row in enumerate(unique1ResultData):
					for col_id, cell in enumerate(row):
						additionsToTopologySheet.cell(row=rowNumber, column=col_id + 7, value=cell)
					rowNumber += 1

				for row_id, row in enumerate(commonResultData):
					for col_id, cell in enumerate(row):
						additionsToTopologySheet.cell(row=rowNumber, column=col_id + 4, value=cell)
					rowNumber += 1
				i = 0

				count_first_source = 0
				count_second_source = 0
				count_first_method = 0
				count_second_method = 0
				count_common_source = 0
				count_common_method = 0


				for row_id, row in enumerate(changeInMetadataList_result):
					# if row.__len__() < 10:
					# 	continue
					if row.__len__() > 10 and row[5] == row[10] and row[6] == row[11]:
						continue
					for col_id, cell in enumerate(row):
						if col_id < 4:
							changeInMetadataToTopologySheet.cell(row=i + 6, column=col_id + 1, value=cell)
							# changeInMetavaluesTopologySheet.cell(row=i + 6, column=col_id + 1, value=cell)
						elif col_id == 4:
							if cell == selectedScenarioName1:
								changeInMetadataToTopologySheet.cell(row=i + 6, column=col_id + 1, value=row[5])
								changeInMetadataToTopologySheet.cell(row=i + 6, column=7, value=row[6])
								# changeInMetavaluesTopologySheet.cell(row=i + 6, column=col_id + 1, value=row[5])
								# changeInMetavaluesTopologySheet.cell(row=i + 6, column=7, value=row[6])
								if not row[5] is None and row[5] != '': count_first_source += 1
								if not row[6] is None and row[6] != '': count_first_method += 1
							else:
								changeInMetadataToTopologySheet.cell(row=i + 6, column=col_id + 2, value=row[5])
								changeInMetadataToTopologySheet.cell(row=i + 6, column=8, value=row[6])
								# changeInMetavaluesTopologySheet.cell(row=i + 6, column=col_id + 2, value=row[5])
								# changeInMetavaluesTopologySheet.cell(row=i + 6, column=8, value=row[6])
								if not row[5] is None and row[5] != '': count_second_method += 1
								if not row[6] is None and row[6] != '': count_second_source += 1
							# if len(row) < 10:
							# 	break
						elif col_id == 9:
							if cell == selectedScenarioName1:
								changeInMetadataToTopologySheet.cell(row=i + 6, column=5, value=row[10])
								changeInMetadataToTopologySheet.cell(row=i + 6, column=7, value=row[11])
								# changeInMetavaluesTopologySheet.cell(row=i + 6, column=5, value=row[10])
								# changeInMetavaluesTopologySheet.cell(row=i + 6, column=7, value=row[11])
								if not row[10] is None and row[10] != '': count_first_source += 1
								if not row[11] is None and row[11] != '': count_first_method += 1
							else:
								changeInMetadataToTopologySheet.cell(row=i + 6, column=6, value=row[10])
								changeInMetadataToTopologySheet.cell(row=i + 6, column=8, value=row[11])
								# changeInMetavaluesTopologySheet.cell(row=i + 6, column=6, value=row[10])
								# changeInMetavaluesTopologySheet.cell(row=i + 6, column=8, value=row[11])
								if not row[10] is None and row[10] != '': count_second_method += 1
								if not row[11] is None and row[11] != '': count_second_source += 1
							break
					if row.__len__() > 10 and row[5] == row[10]:
						changeInMetadataToTopologySheet.cell(row=i + 6, column=9, value=row[10])
						changeInMetadataToTopologySheet.cell(row=i + 6, column=5, value="")
						changeInMetadataToTopologySheet.cell(row=i + 6, column=6, value="")

						# changeInMetavaluesTopologySheet.cell(row=i + 6, column=9, value=row[10])
						# changeInMetavaluesTopologySheet.cell(row=i + 6, column=5, value="")
						# changeInMetavaluesTopologySheet.cell(row=i + 6, column=6, value="")
						count_common_source += 1
						count_first_source -= 1
						count_second_source -= 1
					if row.__len__() > 10 and row[6] == row[11]:
						changeInMetadataToTopologySheet.cell(row=i + 6, column=10, value=row[11])
						changeInMetadataToTopologySheet.cell(row=i + 6, column=7, value="")
						changeInMetadataToTopologySheet.cell(row=i + 6, column=8, value="")

						# changeInMetavaluesTopologySheet.cell(row=i + 6, column=10, value=row[11])
						# changeInMetavaluesTopologySheet.cell(row=i + 6, column=7, value="")
						# changeInMetavaluesTopologySheet.cell(row=i + 6, column=8, value="")
						count_first_method -= 1
						count_second_method -= 1
						count_common_method += 1
					i += 1


				count_first_source_attr = 0
				count_second_source_attr = 0
				count_first_method_attr = 0
				count_second_method_attr = 0
				count_common_source_attr = 0
				count_common_method_attr = 0
				i = 0

				''' print the result to this excel sheet: ChangeInMetadata_Attributes '''

				for row_id, row in enumerate(changeInMetadataAttributeList_result):
					# if row.__len__() < 10:
					# 	continue
					if row.__len__() > 10 and row[6] == row[11] and row[7] == row[12]:
						continue
					for col_id, cell in enumerate(row):
						if col_id < 4:
							# changeInMetadataToTopologySheet.cell(row=i + 6, column=col_id + 1, value=cell)
							changeInMetavaluesTopologySheet.cell(row=i + 6, column=col_id + 1, value=cell)
						elif col_id == 5:
							if cell == selectedScenarioName1:
								changeInMetavaluesTopologySheet.cell(row=i + 6, column=5, value=row[6])
								changeInMetavaluesTopologySheet.cell(row=i + 6, column=7, value=row[7])
								if not row[6] is None and row[6] != '': count_first_source_attr += 1
								if not row[7] is None and row[7] != '': count_first_method_attr += 1
							else:
								changeInMetavaluesTopologySheet.cell(row=i + 6, column=6, value=row[6])
								changeInMetavaluesTopologySheet.cell(row=i + 6, column=8, value=row[7])
								if not row[6] is None and row[6] != '': count_second_method_attr += 1
								if not row[7] is None and row[7] != '': count_second_source_attr += 1
							# if len(row) < 10:
							# 	break
						elif col_id == 10:
							if cell == selectedScenarioName1:
								# changeInMetadataToTopologySheet.cell(row=i + 6, column=5, value=row[10])
								# changeInMetadataToTopologySheet.cell(row=i + 6, column=7, value=row[11])
								changeInMetavaluesTopologySheet.cell(row=i + 6, column=5, value=row[11])
								changeInMetavaluesTopologySheet.cell(row=i + 6, column=7, value=row[12])
								if not row[11] is None and row[11] != '': count_first_source_attr += 1
								if not row[12] is None and row[12] != '': count_first_method_attr += 1
							else:
								# changeInMetadataToTopologySheet.cell(row=i + 6, column=6, value=row[11])
								# changeInMetadataToTopologySheet.cell(row=i + 6, column=8, value=row[12])
								changeInMetavaluesTopologySheet.cell(row=i + 6, column=6, value=row[11])
								changeInMetavaluesTopologySheet.cell(row=i + 6, column=8, value=row[12])
								if not row[11] is None and row[11] != '': count_second_method_attr += 1
								if not row[12] is None and row[12] != '': count_second_source_attr += 1
							break
					if row.__len__() > 10 and row[6] == row[11]:
						# changeInMetadataToTopologySheet.cell(row=i + 6, column=9, value=row[11])
						# changeInMetadataToTopologySheet.cell(row=i + 6, column=5, value="")
						# changeInMetadataToTopologySheet.cell(row=i + 6, column=6, value="")

						changeInMetavaluesTopologySheet.cell(row=i + 6, column=9, value=row[11])
						changeInMetavaluesTopologySheet.cell(row=i + 6, column=5, value="")
						changeInMetavaluesTopologySheet.cell(row=i + 6, column=6, value="")
						count_common_source_attr += 1
						count_first_source_attr -= 1
						count_second_source_attr -= 1
					if row.__len__() > 10 and row[7] == row[12]:
						# changeInMetadataToTopologySheet.cell(row=i + 6, column=10, value=row[11])
						# changeInMetadataToTopologySheet.cell(row=i + 6, column=7, value="")
						# changeInMetadataToTopologySheet.cell(row=i + 6, column=8, value="")

						changeInMetavaluesTopologySheet.cell(row=i + 6, column=10, value=row[12])
						changeInMetavaluesTopologySheet.cell(row=i + 6, column=7, value="")
						changeInMetavaluesTopologySheet.cell(row=i + 6, column=8, value="")
						count_common_method_attr += 1
						count_second_method_attr -= 1
						count_first_method_attr -= 1
					i += 1

				first_scenario_value_count = 0
				second_scenario_value_count = 0
				list_changInValue = []
				for row_id, row in enumerate(changeInMetadataValueList):
					macth_flag = False
					for row_i, result in enumerate(list_changInValue):
						if result[0] == row[0] and result[1] == row[1] and result[2] == row[2] and result[3] == row[3]:
							if row[5] == selectedScenarioName1:
								first_scenario_value_count += 1
								list_changInValue[row_i][5] = row[9]
							else:
								second_scenario_value_count += 1
								list_changInValue[row_i][6] = row[9]
							macth_flag = True
							break
					if not macth_flag:
						items = []
						firstScenarioFlag = True
						for col_id, cell in enumerate(row):
							if col_id < 5:
								items.append(cell)
							else:
								if col_id == 5:
									if cell == selectedScenarioName2:
										firstScenarioFlag = False
								elif col_id == 9:
									if firstScenarioFlag:
										first_scenario_value_count += 1
										items.append(cell)
										items.append('')
									else:
										second_scenario_value_count += 1
										items.append('')
										items.append(cell)
						list_changInValue.append(items)

				for row_id, row in enumerate(list_changInValue):
					for col_id, cell in enumerate(row):
						changeInValuesSheet.cell(row=row_id + 6, column=col_id+1, value=cell)

				# print the scenario names in F and G
				changeInValuesSheet.cell(row=4, column=6, value=selectedScenarioName1)
				changeInValuesSheet.cell(row=4, column=7, value=selectedScenarioName2)

				allValueCount = self.compareScenarios.AllValuesMapperCount(selectedDataset, selectedMasterNetworkName)

				# print values to column F: Unique to Scenario 1
				changeInValuesSheet.cell(row=2, column=6, value=first_scenario_value_count)
				changeInValuesSheet.cell(row=3, column=6, value=str(round(float(first_scenario_value_count)*100.0/ float(allValueCount) , 2)) + '%')

				# print values to column G: Unique to Scenario 2
				changeInValuesSheet.cell(row=2, column=7, value=second_scenario_value_count)
				changeInValuesSheet.cell(row=3, column=7, value=str(round(float(second_scenario_value_count)*100/ float(allValueCount), 2)) + '%')

				common_count = allValueCount - first_scenario_value_count - second_scenario_value_count

				# print values to column H: Common to both
				changeInValuesSheet.cell(row=2, column=8, value=common_count)
				changeInValuesSheet.cell(row=3, column=8, value=str(round(float(common_count) * 100/ float(allValueCount), 2)) + '%')

				changeInValuesSheet.cell(row=2, column=9, value=allValueCount)
				changeInValuesSheet.cell(row=3, column=9, value='100%')

				additionsToTopologySheet.cell(row=2, column=2, value=selectedScenarioName1)
				additionsToTopologySheet.cell(row=2, column=8, value=selectedScenarioName2)

				changeInMetadataToTopologySheet.cell(row=4, column=5, value=selectedScenarioName1)
				changeInMetadataToTopologySheet.cell(row=4, column=6, value=selectedScenarioName2)
				changeInMetadataToTopologySheet.cell(row=4, column=7, value=selectedScenarioName1)
				changeInMetadataToTopologySheet.cell(row=4, column=8, value=selectedScenarioName2)

				changeInMetavaluesTopologySheet.cell(row=4, column=5, value=selectedScenarioName1)
				changeInMetavaluesTopologySheet.cell(row=4, column=6, value=selectedScenarioName2)
				changeInMetavaluesTopologySheet.cell(row=4, column=7, value=selectedScenarioName1)
				changeInMetavaluesTopologySheet.cell(row=4, column=8, value=selectedScenarioName2)

				allMetaValueCount = self.compareScenarios.AllTopologyMetadataCount(selectedDataset, selectedMasterNetworkName)
				changeInMetadataToTopologySheet.cell(row=2, column=5, value=count_first_source)
				changeInMetadataToTopologySheet.cell(row=3, column=5, value=str(round(
					float(count_first_source) * 100/ float(allMetaValueCount - count_common_source), 2)) + '%')
				changeInMetadataToTopologySheet.cell(row=2, column=6, value=count_second_source)
				changeInMetadataToTopologySheet.cell(row=3, column=6, value=str(round(
					float(count_second_source) * 100 / float(allMetaValueCount - count_common_source), 2)) + '%')
				changeInMetadataToTopologySheet.cell(row=2, column=7, value=count_first_method)
				changeInMetadataToTopologySheet.cell(row=3, column=7, value=str(round(
					float(count_first_method) * 100/ float(allMetaValueCount - count_common_method), 2)) + '%')
				changeInMetadataToTopologySheet.cell(row=2, column=8, value=count_second_method)
				changeInMetadataToTopologySheet.cell(row=3, column=8, value=str(round(
					float(count_second_method) * 100/ float(allMetaValueCount - count_common_method), 2)) + '%')
				changeInMetadataToTopologySheet.cell(row=2, column=9, value=count_common_source)
				rest_source_count = allMetaValueCount - count_first_source - count_second_source
				changeInMetadataToTopologySheet.cell(row=3, column=9, value=str(round(float(rest_source_count) * 100/ float(allMetaValueCount), 2)) + '%')
				rest_method_count = allMetaValueCount - count_first_method - count_second_method
				changeInMetadataToTopologySheet.cell(row=2, column=10, value=count_common_method)
				changeInMetadataToTopologySheet.cell(row=3, column=10, value=str(round(float(rest_method_count) * 100/ float(allMetaValueCount), 2)) + '%')
				changeInMetadataToTopologySheet.cell(row=2, column=11, value=allMetaValueCount)
				changeInMetadataToTopologySheet.cell(row=3, column=11, value='100%')

				allAttrVauleCount = self.compareScenarios.AllMetadataAttributesCount(selectedDataset, selectedMasterNetworkName)
				changeInMetavaluesTopologySheet.cell(row=2, column=5, value=count_first_source_attr)
				changeInMetavaluesTopologySheet.cell(row=3, column=5, value=str(round(
					float(count_first_source_attr) * 100/ float(allAttrVauleCount - count_common_source_attr), 2)) + '%')
				changeInMetavaluesTopologySheet.cell(row=2, column=6, value=count_second_source_attr)
				changeInMetavaluesTopologySheet.cell(row=3, column=6, value=str(round(
					float(count_second_source_attr) * 100/ float(allAttrVauleCount - count_common_source_attr), 2)) + '%')
				changeInMetavaluesTopologySheet.cell(row=2, column=7, value=count_first_method_attr)
				changeInMetavaluesTopologySheet.cell(row=3, column=7, value=str(round(
					float(count_first_method_attr) * 100/ float(allAttrVauleCount - count_common_method_attr), 2)) + '%')
				changeInMetavaluesTopologySheet.cell(row=2, column=8, value=count_second_method_attr)
				changeInMetavaluesTopologySheet.cell(row=3, column=8, value=str(round(
					float(count_second_method_attr) * 100/ float(allAttrVauleCount - count_common_method_attr), 2)) + '%')
				rest_source_att = allAttrVauleCount - count_first_source_attr - count_second_source_attr
				changeInMetavaluesTopologySheet.cell(row=2, column=9, value=count_common_source)
				changeInMetavaluesTopologySheet.cell(row=3, column=9, value=str(round(
					float(rest_source_att) * 100/ float(allAttrVauleCount), 2)) + '%')
				rest_method_attr = allAttrVauleCount - count_first_method_attr - count_second_method_attr
				changeInMetavaluesTopologySheet.cell(row=2, column=10, value=count_common_method)
				changeInMetavaluesTopologySheet.cell(row=3, column=10, value=str(round(
					float(rest_method_attr) * 100/ float(allAttrVauleCount), 2)) + '%')
				changeInMetavaluesTopologySheet.cell(row=2, column=11, value=allAttrVauleCount)
				changeInMetavaluesTopologySheet.cell(row=3, column=11, value='100%')

				try:
					book2.save(self.path)
				except Exception as e:
					raise Exception("Permission denied!\nFileName : {}\nThis file is open or used by another application. Please close it first".format(e.filename))
			from Messages_forms.msg_successLoadDatabase import msg_successLoadDatabase

			instance = msg_successLoadDatabase(None)
			instance.m_staticText1.SetLabel("\n \n The comparison and writing to Excel where successful. \n Check the excel file you provided to see the results")
			instance.ShowModal()
			self.Destroy()
		except Exception as e:
			print e
			messageDlg = msg_somethigWrong(None, msg=e.message)
			messageDlg.ShowModal()
			# raise Exception(e.message)

	def checkConnectingToSqlite(self):
		db_setup = DB_Setup()
		if not db_setup.get_session():
			return False
		return True




	def btn_cancelOnButtonClick( self, event ):
		self.Close()
