"""Subclass of dlg_SearchDataValues, which is generated by wxFormBuilder."""

import wx
import viewer.WaMDaMWizard
from controller.wamdamAPI.GetDataValues import GetDataValues
from viewer.Messages_forms.msg_somethigWrong import msg_somethigWrong
# This library is used here to write data to an excel file


# Implementing dlg_SearchDataValues
class dlg_SearchDataValues(viewer.WaMDaMWizard.dlg_SearchDataValues):
	def __init__( self, parent ):
		viewer.WaMDaMWizard.dlg_SearchDataValues.__init__(self, parent)
		try:
			''' Get Controlled object type'''
			self.getDataValues = GetDataValues()
			'''Get C_VObjectType'''
			list_types = self.getDataValues.GetCV_ObjectType()
			if list_types.__len__() > 0:
				self.comboBox_ctrObjectType.SetItems(list_types)

			'''Get Attribute names'''
			list_attributes = self.getDataValues.getAttribute()
			if list_attributes.__len__() > 0:
				self.comboBox_ctrAttribute.SetItems(list_attributes)

			'''Get CV_Instance names'''
			list_InstanceNames = self.getDataValues.getCVinstanceName()
			if list_InstanceNames.__len__() > 0:
				self.comboBox_ctrlInstance.SetItems(list_InstanceNames)

			''' check bok flag array'''
			self.typeCheck_list ={
				'DualValues': False,
				'DescriptorValues': False,
				'NumericValues': False,
				'ElectronicFiles': False,
				'SeaonalNumericValues': False,
				'TimeSeries': False,
				'All': False,
				'MultiVariableSeries': False
			}
			self.path = ""
		except Exception as e:
			message = msg_somethigWrong(None, msg=e.message)
			message.Show()
			self.Destroy()
	# Handlers for dlg_SearchDataValues events.
	def dlg_SearchDataValuesOnInitDialog( self, event ):
		# TODO: Implement dlg_SearchDataValuesOnInitDialog
		pass
	
	def checkBox_NodesOnCheckBox( self, event ):
		# TODO: Implement checkBox_NodesOnCheckBox
		pass
	
	def checkBox_LinksOnCheckBox( self, event ):
		# TODO: Implement checkBox_LinksOnCheckBox
		pass
	
	def comboBox_ctrObjectTypeOnCombobox( self, event ):
		# TODO: Implement comboBox_ctrObjectTypeOnCombobox
		# selectedObectType = self.comboBox_ctrObjectType.Value
		# gettedAttributeNames = self.getDataValues.getAttribute(selectedObectType)
		# if gettedAttributeNames.__len__() <= 0:
		# 	return
		# self.comboBox_ctrAttribute.SetItems(gettedAttributeNames)
		pass
	
	def comboBox_ctrAttributeOnCombobox( self, event ):
		# TODO: Implement comboBox_ctrAttributeOnCombobox
		pass
	
	def checkBox_DualValuesOnCheckBox( self, event ):
		# TODO: Implement checkBox_DualValuesOnCheckBox
		if self.checkBox_DualValues.IsChecked():
			self.typeCheck_list['DualValues'] = True
		else:
			self.typeCheck_list['DualValues'] = False
	def checkBox_NumericValuesOnCheckBox( self, event ):
		# TODO: Implement checkBox_NumericValuesOnCheckBox
		if self.checkBox_NumericValues.IsChecked():
			self.typeCheck_list['NumericValues'] = True
		else:
			self.typeCheck_list['NumericValues'] = False
	
	def checkBox_SeasonalNumericValuesOnCheckBox( self, event ):
		# TODO: Implement checkBox_SeasonalNumericValuesOnCheckBox
		if self.checkBox_SeasonalNumericValues.IsChecked():
			self.typeCheck_list['SeaonalNumericValues'] = True
		else:
			self.typeCheck_list['SeaonalNumericValues'] = False
	
	def checkBox_AllOnCheckBox( self, event ):
		# TODO: Implement checkBox_TextFreeOnCheckBox
		if self.checkBox_All.IsChecked():
			self.typeCheck_list['All'] = True
		else:
			self.typeCheck_list['All'] = False
	
	def checkBox_DescriptorValuesOnCheckBox( self, event ):
		# TODO: Implement checkBox_DescriptorValuesOnCheckBox
		if self.checkBox_DescriptorValues.IsChecked():
			self.typeCheck_list['DescriptorValues'] = True
		else:
			self.typeCheck_list['DescriptorValues'] = False
	
	def checkBox_ElectronicFilesOnCheckBox( self, event ):
		# TODO: Implement checkBox_ElectronicFilesOnCheckBox
		if self.checkBox_ElectronicFiles.IsChecked():
			self.typeCheck_list['ElectronicFiles'] = True
		else:
			self.typeCheck_list['ElectronicFiles'] = False
	
	def checkBox_TimeSeriesOnCheckBox( self, event ):
		# TODO: Implement checkBox_TimeSeriesOnCheckBox
		if self.checkBox_TimeSeries.IsChecked():
			self.typeCheck_list['TimeSeries'] = True
		else:
			self.typeCheck_list['TimeSeries'] = False
	
	def checkBox_MultiAttributeSeriesOnCheckBox(self, event):
		# TODO: Implement checkBox_MultiVariableSeriesOnCheckBox
		if self.checkBox_MultiAttributeSeries.IsChecked():
			self.typeCheck_list['MultiVariableSeries'] = True
		else:
			self.typeCheck_list['MultiVariableSeries'] = False
	
	def comboBox_NetworkOnCombobox( self, event ):
		# TODO: Implement comboBox_NetworkOnCombobox
		pass
	
	def FilePicker_searchDataValuesOnFileChanged( self, event ):
		# TODO: Implement FilePicker_searchDataValuesOnFileChanged
		valid_extension = ['xls','xlsx']
		self.path = self.FilePicker_searchDataValues.GetPath()
		if not (self.path.split('.')[-1] in valid_extension):
			message = msg_somethigWrong(None, msg="Please select a valid Excel File")
			message.ShowModal()
			return
		print 'This is working just fine...'
		print self.path
	
	def btn_Search_nodesLinksOnButtonClick( self, event ):
		# TODO: Implement btn_Search_nodesLinksOnButtonClick
		message = ''
		if self.comboBox_ctrObjectType.Value == None or self.comboBox_ctrObjectType.Value ==  '':
			message = 'Please select Controlled Object Type!!!'
		if self.comboBox_ctrAttribute.Value == None or self.comboBox_ctrAttribute.Value ==  '':
			message = 'Please select Controlled Attribute!!!'
		if self.comboBox_ctrlInstance.Value == None or self.comboBox_ctrlInstance.Value ==  '':
			message = 'Please select Controlled Instance Name!!!'
		try:
			if not ['xlsx', 'xlsm', 'xls'].__contains__(self.path.split('.')[-1]):
				message = 'Please select a valid excel file.'
		except:
			message = 'Please select a valid excel file.'
		if self.count_of_selected_checkbox() == 0:
			message = 'Please select one at least check on box.'

		if message != '':
			messageDlg = msg_somethigWrong(None, msg=message)
			messageDlg.Show()
			return
		try:

			selectedType = self.comboBox_ctrObjectType.Value
			selectedAttribute = self.comboBox_ctrAttribute.Value
			selectedInstance = self.comboBox_ctrlInstance.Value
			checkFlag = False

			if self.typeCheck_list['All']:
				checkFlag = True
				self.getDataValues.exportDualValuesSheet(selectedType, selectedAttribute, selectedInstance, self.path)
				self.getDataValues.exportTextConrolledSheet(selectedType, selectedAttribute, selectedInstance, self.path)
				self.getDataValues.exportNumericValuesheet(selectedType, selectedAttribute, selectedInstance, self.path)
				self.getDataValues.exportElectronicElectronicFilesSheet(selectedType, selectedAttribute, selectedInstance, self.path)
				self.getDataValues.exportSeasonalSheet(selectedType, selectedAttribute, selectedInstance, self.path)
				self.getDataValues.exportTimeSeriesSheet(selectedType, selectedAttribute, selectedInstance, self.path)
				self.getDataValues.exportMultiSheet(selectedType, selectedAttribute, selectedInstance, self.path)
			else:
				if self.typeCheck_list['DualValues']:
					checkFlag = True
					self.getDataValues.exportDualValuesSheet(selectedType, selectedAttribute, selectedInstance, self.path)
				if self.typeCheck_list['DescriptorValues']:
					checkFlag = True
					self.getDataValues.exportTextConrolledSheet(selectedType, selectedAttribute, selectedInstance, self.path)
				if self.typeCheck_list['NumericValues']:
					checkFlag = True
					self.getDataValues.exportNumericValuesheet(selectedType, selectedAttribute, selectedInstance, self.path)
				if self.typeCheck_list['ElectronicFiles']:
					checkFlag = True
					self.getDataValues.exportElectronicElectronicFilesSheet(selectedType, selectedAttribute, selectedInstance, self.path)
				if self.typeCheck_list['SeaonalNumericValues']:
					checkFlag = True
					self.getDataValues.exportSeasonalSheet(selectedType, selectedAttribute, selectedInstance, self.path)
				if self.typeCheck_list['TimeSeries']:
					checkFlag = True
					self.getDataValues.exportTimeSeriesSheet(selectedType, selectedAttribute, selectedInstance, self.path)
				# if self.typeCheck_list['TextFree']:
				# 	checkFlag = True
				# 	self.getDataValues.exportTextFreeSheet(selectedType, selectedAttribute, selectedInstance, self.path)
				if self.typeCheck_list['MultiVariableSeries']:
					checkFlag = True
					self.getDataValues.exportMultiSheet(selectedType, selectedAttribute, selectedInstance, self.path)

			if not checkFlag:
				messageDlg = msg_somethigWrong(None, msg="At least select one Controlled Attribute Data Type!!!")
				messageDlg.Show()
				return

			from Messages_forms.msg_successLoadDatabase import msg_successLoadDatabase
			instance = msg_successLoadDatabase(None)
			instance.m_staticText1.SetLabel("Success export excel file")
			instance.ShowModal()
		except Exception as e:
			print e
			messageDlg = msg_somethigWrong(None, msg=e.message)
			messageDlg.Show()
			# raise Exception(e.message)

	def btn_cancelOnButtonClick( self, event ):
		# TODO: Implement btn_cancelOnButtonClick
		self.Close()

	def count_of_selected_checkbox(self):
		count = 0
		if self.checkBox_All.Value:
			count += 1
		elif self.checkBox_DescriptorValues.Value:
			count += 1
		elif self.checkBox_DualValues.Value:
			count += 1
		elif self.checkBox_ElectronicFiles.Value:
			count += 1
		elif self.checkBox_MultiAttributeSeries.Value:
			count += 1
		elif self.checkBox_NumericValues.Value:
			count += 1
		elif self.checkBox_SeasonalNumericValues.Value:
			count += 1
		elif self.checkBox_TimeSeries.Value:
			count += 1
		return count

	
