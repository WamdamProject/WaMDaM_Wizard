"""Subclass of dlg_query_metadata, which is generated by wxFormBuilder."""

import wx
import viewer.WaMDaMWizard
from viewer.Messages_forms.msg_somethigWrong import msg_somethigWrong
from controller.wamdamAPI.GetMetadataByScenario import GetMetadataByScenario
from xlrd import open_workbook
# from xlutils.copy import copy
from openpyxl import load_workbook
from controller.ConnectDB_ParseExcel import DB_Setup

# Implementing dlg_query_metadata
class dlg_query_metadata(viewer.WaMDaMWizard.dlg_query_metadata):
	def __init__( self, parent ):
		viewer.WaMDaMWizard.dlg_query_metadata.__init__(self, parent)

		try:
			if not DB_Setup().get_session():
				msg = "\n\nWarning: Please connect to sqlite first."
				raise Exception(msg)

			''' get metadata qurey object'''
			self.getMetadata = GetMetadataByScenario()
		except Exception as e:
			message = msg_somethigWrong(None, msg=e.message)
			message.ShowModal()
			self.Destroy()
	# Handlers for dlg_query_metadata events.
	def FilePicker_queryModelOnFileChanged( self, event ):
		# TODO: Implement FilePicker_queryModelOnFileChanged
		valid_extension = ['xls','xlsx']
		self.path = self.FilePicker_queryModel.GetPath()
		if not (self.path.split('.')[-1] in valid_extension):
			message = msg_somethigWrong(None, msg="Please select a valid Excel File")
			message.ShowModal()
			return
		print 'This is working just fine...'
		print self.path

	def btn_find_metadataOnButtonClick( self, event ):
		# TODO: Implement btn_find_metadataOnButtonClick

		'''Get and write Organizations, People, Methods, Sources '''
		organization_list = self.getMetadata.GetOrganizations()
		self.write2excel(organization_list, 8, 1)

		people_list = self.getMetadata.GetPeople()
		self.write2excel(people_list, 19, 1)

		source_list = self.getMetadata.GetSources()
		self.write2excel(source_list, 8, 2)

		method_list = self.getMetadata.GetMethods()
		self.write2excel(method_list, 19, 2)

		from viewer.Messages_forms.msg_successLoadDatabase import msg_successLoadDatabase
		instance = msg_successLoadDatabase(None)
		instance.m_staticText1.SetLabel("The metadata excel export successful.")
		instance.ShowModal()
		self.Destroy()
	def btn_cancelOnButtonClick( self, event ):
		# TODO: Implement btn_cancelOnButtonClick
		self.Close()

	def write2excel(self, resutl_list, startRow, sheetNumber):
		try:
			if self.path.split('.')[-1] == 'xls':
				wb = open_workbook(self.path)
				# workbook = copy(wb)
				workbook = wb
				''' Validate sheet in excel'''
				try:
					org_peopleSheet = workbook.get_sheet(2)
					sour_methodSheet = workbook.get_sheet(3)
				except:
					message = msg_somethigWrong(None, msg="Please select a valid Excel File")
					message.ShowModal()
					return

				if (sheetNumber == 1):
					for row_id, row in enumerate(resutl_list):
						for col_id, cell in enumerate(row):
							org_peopleSheet.write(row_id + startRow - 1, col_id + 0, cell)
				else:
					for row_id, row in enumerate(resutl_list):
						for col_id, cell in enumerate(row):
							sour_methodSheet.write(row_id + startRow - 1, col_id + 0, cell)

				workbook.save(self.path)
			else:
				book2 = load_workbook(self.path)
				''' Validate sheet in excel'''
				try:
					org_peopleSheet = book2.get_sheet_by_name("1.1_Organiz&People")
					sour_methodSheet = book2.get_sheet_by_name("1.2_Sources&Methods")
				except:
					message = msg_somethigWrong(None, msg="Please select a valid Excel File")
					message.ShowModal()
					return

				if (sheetNumber == 1):
					for row_id, row in enumerate(resutl_list):
						for col_id, cell in enumerate(row):
							org_peopleSheet.cell(row=row_id + startRow, column=col_id + 1, value=cell)
				else:
					for row_id, row in enumerate(resutl_list):
						for col_id, cell in enumerate(row):
							sour_methodSheet.cell(row=row_id + startRow, column=col_id + 1, value=cell)

				book2.save(self.path)

		except Exception as e:
			print e
			messageDlg = msg_somethigWrong(None, msg=e.message)
			messageDlg.Show()
			raise Exception(e.message)
