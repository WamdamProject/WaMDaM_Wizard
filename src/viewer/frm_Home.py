"""Subclass of frm_Home, which is generated by wxFormBuilder."""
# This file connects all the events in the WaMDaMWizard.py (GUI main page)
# frm_Home connects each button with its dialog box

import wx
import WaMDaMWizard
from Messages_forms.msg_sureToExit import msg_sureToExit


# Implementing frm_Home
class frm_Home( WaMDaMWizard.frm_Home ):
    def __init__( self, parent ):
        WaMDaMWizard.frm_Home.__init__( self, parent )
        self._session = None

        self.Bind(wx.EVT_CLOSE, self._when_closed)

    # Handlers for frm_Home events.
    def rtbn_ConnNewDBOnRibbonButtonClicked( self, event ):
        import dlg_ConnectNewDatabaseSQLite as fcnewdb
        cnewdb=fcnewdb.dlg_ConnectNewDatabaseSQLite(None)
        cnewdb.ShowModal()

    def rtbn_ConnExistingSQLiteOnRibbonButtonClicked( self, event ):
        import dlg_ConnectExistingDatabaseSQLite as fDB
        db=fDB.dlg_ConnectExistingDatabaseSQLite(None)
        db.ShowModal()
        self._session = db._session
        self.Show()


    def rtbn_ConnExistingMySQLOnRibbonButtonClicked( self, event):
        import dlg_ConnectExistingDatabaseMySQL as fDBmy
        dbmy=fDBmy.dlg_ConnectExistingDatabaseMySQL(None)
        dbmy.ShowModal()
        # self._session = dbmy._session
        self.Show()


    def rtbn_CloseConnectionOnRibbonButtonClicked( self, event ):
        import dlg_exit_DB as edb
        exit = edb.ExitDB(None)
        exit.ShowModal()

    def rtbn_ExistWaMDaMOnRibbonButtonClicked( self, event ):
        message = msg_sureToExit(None)
        message.set_parent(self)
        message.ShowModal()

    def rtbn_ShapefileToWaMDaMOnRibbonButtonClicked( self, event ):
        from viewer.Transform_utility import dlg_ShapefileToWaMDaM as fSH
        sh=fSH.dlg_ShapefileToWaMDaM(None)
        sh.ShowModal()


    def rtbnCrossTabSeasonalToWaMDaMOnRibbonButtonClicked( self, event ):
        from viewer.Transform_utility import dlg_CrossTabSeasonalToWaMDaM as fCTS
        CTS=fCTS.dlg_CrossTabSeasonalToWaMDaM(None)
        CTS.ShowModal()

    def rtbn_CrossTabTimeSeriesToWaMDaMOnRibbonButtonClicked( self, event ):
        from viewer.Transform_utility import dlg_CrossTabTimeSeriesToWaMDaM as fCTTS
        CTTS=fCTTS.dlg_CrossTabTimeSeriesToWaMDaM(None)
        CTTS.ShowModal()

    def rtbn_ImportExcelOnRibbonButtonClicked( self, event ):
        import dlg_ImportSpreadsheetBasic as fEXB
        EXB=fEXB.dlg_ImportSpreadsheetBasic(None)
        EXB.ShowModal()
    def rtbn_ImportCUAHSIOnRibbonButtonClicked( self, event ):
        import dlg_ImportFromCUAHSI as cuahs
        CUAHS = cuahs.dlg_ImportFromCUAHS(None)
        CUAHS.ShowModal()

    #def rtbn_ImportWadeOnRibbonButtonClicked( self, event ):
        #wade = fwade.dlg_ImportFromWaDE(None)
        #wade.ShowModal()

    def rtbn_ImportRwiseOnRibbonButtonClicked( self, event ):
        import dlg_ImportRwise as fHY
        HY=fHY.dlg_ImportRwise(None)
        HY.ShowModal()

    def rtbn_ImportOpenAguaOnRibbonButtonClicked(self, event):
        import Publish_Viz.dlg_ImportFromOpenAgua as fOA
        HY_OA = fOA.dlg_ImportFromOpenAgua(None)
        HY_OA.ShowModal()

    def rtbn_AddNewSourceOnRibbonButtonClicked( self, event ):
        import Exporter.dlg_ExtractWeapArea as fEx
        Ext=fEx.dlg_ExtractWeapArea(None)
        Ext.ShowModal()

    def btn_query_metadataOnRibbonButtonClicked(self, event):
        from viewer.Query import dlg_query_metadata as fMeta
        Meta = fMeta.dlg_query_metadata(None)
        Meta.ShowModal()

    def btn_query_modelOnRibbonButtonClicked( self, event ):
        from viewer.Query import dlg_query_model as fQMY
        QM=fQMY.dlg_query_model(None)
        QM.ShowModal()


    def btn_query_netwokOnRibbonButtonClicked( self, event ):
        from viewer.Query import dlg_query_network as fQNY
        QNe=fQNY.dlg_query_network(None)
        QNe.ShowModal()

    def btn_compareScenariosOnRibbonButtonClicked( self, event ):
        import dlg_compare_scenarios as fQCSY
        QCS=fQCSY.dlg_compare_scenarios(None)
        QCS.ShowModal()

    def btn_SearchNodesLinksOnRibbonButtonClicked( self, event ):
        from viewer.Query import dlg_SearchNodesLinks as fQNY
        QNo=fQNY.dlg_SearchNodesLinks(None)
        QNo.ShowModal()

    def btn_SearchDataValuesOnRibbonButtonClicked( self, event ):
        from viewer.Query import dlg_SearchDataValues as fQva
        Qva=fQva.dlg_SearchDataValues(None)
        Qva.ShowModal()

    def rtbn_WEAPOnRibbonButtonClicked( self, event ):
        import Exporter.dlg_SelectModel as fServ
        Serv=fServ.dlg_SelectModel(None)
        Serv.ShowModal()

    def rtbn_WASHOnRibbonButtonClicked( self, event ):
        import Exporter.dlg_re_run_export as frerun
        rRun = frerun.dlg_re_run_export(None)
        # rRun.ShowModal()


    def rtbn_ExportToExcelOnRibbonButtonClicked( self, event ):
        import dlg_ExportScenarioDataToExcel as fhExpEx
        ExpExcel=fhExpEx.dlg_ExportScenarioDataToExcel(None)
        ExpExcel.ShowModal()

    def btnAboutWaMDaMOnRibbonButtonClicked( self, event ):
        import dlg_About as fAB
        AB=fAB.dlg_About(None)
        AB.ShowModal()

    def btnLicenseOnRibbonButtonClicked( self, event ):
        import dlg_License as fLI
        LI=fLI.dlg_License(None)
        LI.ShowModal()

    def btnHelpOnRibbonButtonClicked( self, event ):
        import dlg_Help as fHE
        HE=fHE.dlg_Help(None)
        HE.ShowModal()

    def rtbn_HydroShareOnRibbonButtonClicked( self, event ):
        from Publish_Viz.dlg_Publish_HydroShare import dlg_Publish
        PublishDlg =dlg_Publish(None)
        PublishDlg.ShowModal()

    def rtbn_OpenAguaOnRibbonButtonClicked( self, event ):
        from Publish_Viz.dlg_VisualizeInOpenAgua import dlg_VisulaizeWaMDaM
        VisulaizeWaMDaMDlg =dlg_VisulaizeWaMDaM(None)
        VisulaizeWaMDaMDlg.ShowModal()
    # def OnCloseWindow(self, event):
    #     import dlg_exit_DB as edb
    #     exit = edb.ExitDB(None)
    #     exit.ShowModal()





    def _when_closed(self, event):
        import dlg_exit_DB as edb
        exit = edb.ExitDB(None)
        exit.disconnect_DB()
        self.Destroy()
        wx.GetApp().ExitMainLoop()
        # exit.ShowModal()
        # if exit.disconnectResult:
        #     self.Destroy()
            # wx.GetApp().ExitMainLoop()
    #TODO add this event
    #self.Bind(wx.EVT_CLOSE, self.onClose)
    #def onClose(self):
        #self.Destroy()
        #wx.GetApp().ExitMainLoop()
