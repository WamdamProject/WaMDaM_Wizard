"""Subclass of dlg_ImportFromCUAHS, which is generated by wxFormBuilder."""

import wx, define, threading
import WaMDaMWizard
from controller.CUAHS_importer import CUAHSI_importer
from controller.ConnectDB_ParseExcel import DB_Setup
from Messages_forms.msg_somethigWrong import msg_somethigWrong
from Messages_forms.msg_loadingToExit import msg_sureToExit

# Implementing dlg_ImportFromCUAHS
class dlg_ImportFromCUAHS( WaMDaMWizard.dlg_ImportFromCUAHS ):
    def __init__( self, parent ):
        WaMDaMWizard.dlg_ImportFromCUAHS.__init__( self, parent )

        self.response = None
        self.btn_Load.Enabled = False

        ''' init comboxs'''
        list_code = ['NWISUV:10092700', 'NWISUV:10011500', 'NWISUV:10046500']
        list_Variablecode = ['NWISDV:00060/DataType=MEAN']
        self.comboBox_Code.SetItems(list_code)
        self.comboBox_VariableCode.SetItems(list_Variablecode)

    # NWISUV:10092700 /BEAR RIVER AT IDAHO-UTAH STATE LINE
    # NWISUV:10011500 /BEAR RIVER NEAR UTAH-WYOMING STATE LINE
    # NWISUV:10046500 /BEAR RIVER BL STEWART DAM NR MONTPELIER, ID

    # Handlers for dlg_ImportFromCUAHS events.
    def btn_RetrieveDataOnButtonClick( self, event ):
        from suds.client import Client

        # self.m_textCtrl22.Value = 'NWISUV:10105900'
        # self.m_textCtrl23.Value = 'NWISUV:00060'
        # self.m_textCtrl24.Value = '2016-10-20'
        # self.m_textCtrl25.Value = '2016-11-06'

        # Check whether user select needed items correctly
        validation_check = self.check_validation()
        if not validation_check:
            return

        # Create the inputs needed for the web service call //daily values 
        wsdlURL = 'http://hydroportal.cuahsi.org/nwisdv/cuahsi_1_1.asmx?WSDL'

        # siteCode = self.m_textCtrl22.Value #'NWISUV:10105900'
        # variableCode = self.m_textCtrl23.Value #'NWISUV:00060'

        siteCode = self.comboBox_Code.Value #'NWISUV:10105900'
        variableCode = self.comboBox_VariableCode.Value #'NWISUV:00060'
        beginDate = self.m_textCtrl24.Value #'2016-10-20'
        endDate = self.m_textCtrl25.Value #'2016-11-06'
        
        
        #siteCode= NWISUV:10039500 for BEAR RIVER AT BORDER, WY
        # variableCode NWISDV:00060/DataType=Mean for Discharge, cubic feet per second
        
        

        # Create a new object named "NWIS" for calling the web service methods
        NWIS = Client(wsdlURL).service

        # Call the GetValuesObject method to return datavalues
        try:
            self.response = NWIS.GetValuesObject(siteCode, variableCode, beginDate, endDate)
        except Exception as e:
            message = msg_somethigWrong(None, msg='\n\n\nError, The provided values do not have data in the server.\nPlease make sure to enter correct values.')
            message.ShowModal()
            return

        self.btn_Load.Enabled = True

        # Get the site's name from the response
        siteName = self.response.timeSeries[0].sourceInfo.siteName
        # print self.response

        # Create some blank lists in which to put the values and their dates
        # a = []  # The values
        # b = []  # The dates
        # 
        # # Get the values and their dates from the web service response
        # values = response.timeSeries[0].values[0].value
        # 
        # # Loop through the values and load into the blank lists using append
        # for v in values:
        # 	a.append(float(v.value))
        # 	b.append(v._dateTime)

        # Create a Pandas Series object from the lists
        # Set the index of the Series object to the dates
        # ts = Series(a, index=b)

        # Use MatPlotLib to create a plot of the time series
        # Create a plot of the streamflow statistics
        # ------------------------------------------
        # Create a figure object and add a subplot
        # fig = plt.figure()
        # ax = fig.add_subplot(1, 1, 1)  # arguments for add_subplot - add_subplot(nrows, ncols, plot_number)

        # Call the plot() methods on the series object to plot the data
        # ts.plot(color='blue', linestyle='solid', label='15-minute streamflow values')

        # Set some properties of the subplot to make it look nice
        # ax.set_ylabel('Discharge, cubic feet per second')
        # ax.set_xlabel('Date')
        # ax.grid(True)
        # ax.set_title(siteName)

        # Add a legend with some customizations
        # legend = ax.legend(loc='upper left', shadow=True)

        # Create a frame around the legend.
        # frame = legend.get_frame()
        # frame.set_facecolor('0.95')
        #
        # # Set the font size in the legend
        # for label in legend.get_texts():
        # 	label.set_fontsize('large')
        #
        # for label in legend.get_lines():
        # 	label.set_linewidth(1.5)  # the legend line width

        # plt.show()

        # print ts
    
    def btn_LoadOnButtonClick( self, event ):
        # TODO: Implement btn_LoadOnButtonClick
        # Check whether user select needed items correctly
        validation_check = self.check_validation()
        if not validation_check:
            return

        self.btn_RetrieveData.Enabled = False
        self.btn_Load.Enabled = False

    # Show a msg to tell the user to wait.
        from viewer.Messages_forms.generalMsgDlg import messageDlg
        self.waiting_dlg = messageDlg(None)
        self.waiting_dlg.btn_OK.Shown = False
        self.waiting_dlg.Title = "Loading Data..."
        self.waiting_dlg.setMessage("Please wait for Wizard to call and retrieve Water One Flow web-service.\nIt might take seconds to several minutes depending on the \n\tsize of the data.")
        self.waiting_dlg.btn_Cancel.Bind(wx.EVT_BUTTON, self.stop_loading)
        self.waiting_dlg.Show()
    #///////////////////////////////////////////////////////////////////////#

    # Start thread to load data
        self.our_thread = threading.Thread(None, self.load_data)
        self.our_thread.start()
    #///////////////////////////////////////////////////////////////////////#

    def load_data(self):
    # Load CUAHS data within db
        importer = CUAHS_importer()
        importer.load_data(self.response)
    #/////////////////////////////////////////////////////////////#

    # Call allDone method once loading is done
        wx.CallAfter(self.allDone)
    #//////////////////////////////////////////


    def allDone(self):
        self.waiting_dlg.Destroy()
    # Popup success message if loading CUAHSI data within Sqlite db.
        from Messages_forms.msg_successLoadDatabase import msg_successLoadDatabase
        instance = msg_successLoadDatabase(None)
        instance.setMessageText(u"\n\nYou successfully loaded the data in CUAHSI data into " + define.dbName + u". \nYou can view the data by using: SQLite Manager: Add-ons for\nFirefox web browser")
        instance.ShowModal()
        instance.Destroy()
    #/////////////////////////////////////////////////////////////#
        self.btn_RetrieveData.Enabled = True

    def stop_loading(self, event):
        self.sure_dlg = msg_sureToExit(self.waiting_dlg, "Are you sure you want to cancel/stop data loading?")
        self.sure_dlg.btn_ok.Bind(wx.EVT_BUTTON, self.btn_cancelOnButtonClick)
        self.sure_dlg.Show()
    
    def btn_cancelOnButtonClick( self, event ):
        # TODO: Implement btn_cancelOnButtonClick
        if self.our_thread != None and self.our_thread.isAlive():
            self.our_thread._Thread_stoped = True
        if self.sure_dlg != None:
            self.sure_dlg.Destroy()
            define.logger.error('the user canceled data loading and the Wizard reverted everything. Please load the file again.')

        if self.waiting_dlg != None: self.waiting_dlg.Destroy()
        self.Destroy()


    def check_validation(self):
    # Check whether user select needed items correctly
        from viewer.Messages_forms.generalMsgDlg import messageDlg
        msg = ""
        if self.comboBox_Code.Value is None or self.comboBox_Code.Value == "":
            msg = "Warning!\n'Site Code' field can not be empty. Please provide CUAHSI Site Code."
        elif self.comboBox_VariableCode.Value is None or self.comboBox_VariableCode.Value == "":
            msg = "Warning!\n'Variable Code' field can not be empty. Please provide CUAHSI Variable Code."
        elif self.m_textCtrl24.Value is None or self.m_textCtrl24.Value == "":
            msg = "Warning!\n'Time Series Begin Date' field can not be empty. Please provide Time Series Begin Date [yyyy-mm-dd]."
        elif self.m_textCtrl25.Value is None or self.m_textCtrl25.Value == "":
            msg = "Warning!\n'Time Series End Date' field can not be empty. Please provide Time Series End Date [yyyy-mm-dd]."
        if msg != "":
            instance = messageDlg(None)
            instance.setMessage(msg)
            instance.ShowModal()
            instance.Destroy()
            return False
    #///////////////////////////////////////////////////////////////////////#

    # Check whether Sqlite db is connected.
        setup = DB_Setup()
        if not setup.get_session():
            message = msg_somethigWrong(None, msg='\n\n\nError, No Database Found, Please first connect to a Database.')
            message.ShowModal()
            return False
    #///////////////////////////////////////////////////////////////////////#

        return True
