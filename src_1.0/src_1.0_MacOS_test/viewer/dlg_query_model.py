"""Subclass of dlg_query_model, which is generated by wxFormBuilder."""

import wx
import WaMDaMWizard
from controller.wamdamAPI.GetDataStructure import GetDataStructure
from xlrd import open_workbook
# from xlutils.copy import copy
from Messages_forms.msg_somethigWrong import msg_somethigWrong
# This library is used here to write data to an excel file
from openpyxl import load_workbook

# Implementing dlg_query_model
class dlg_query_model( WaMDaMWizard.dlg_query_model ):
	def __init__( self, parent ):
		WaMDaMWizard.dlg_query_model.__init__( self, parent )
		self.path = ''
		try:
			self.dataStructure = GetDataStructure()
			self.datasets = self.dataStructure.getDatasets()
			list_acromy = list()
			for row in self.datasets:
				list_acromy.append(row.DatasetAcronym)
			if list_acromy.__len__() > 0:
				self.comboBox_selectModel.SetItems(list_acromy)
		except Exception as e:
			message = msg_somethigWrong(None, msg=e.message)
			message.Show()
			self.Destroy()
	# Handlers for dlg_query_model events.
	def comboBox_selectModelOnCombobox( self, event ):

		# TODO: Implement comboBox_selectModelOnCombobox
		pass

	def FilePicker_queryModelOnFileChanged( self, event ):
		# TODO: Implement FilePicker_queryModelOnFileChanged
		valid_extension = ['xls','xlsx']
		self.path = self.FilePicker_queryModel.GetPath()
		if not (self.path.split('.')[-1] in valid_extension):
			self.Destroy()
			message = msg_somethigWrong(None, msg="A non excel file was selected, \n\n"
                                                  " Please select a valid Excel File")
			message.Show()
		print 'This is working just fine...'
		print self.path

	def btn_find_model_reqsOnButtonClick( self, event ):
		# TODO: Implement btn_find_model_reqsOnButtonClick
		print 'this is starting'
		selectedDataset = self.comboBox_selectModel.Value

		message = ''
		if (selectedDataset == None or selectedDataset == '') and not ['xlsx', 'xlsm', 'xls'].__contains__(self.path.split('.')[-1]):
			message = 'Select the model name in WamDam.\nAnd please select a valid excel file.'
		elif selectedDataset == None or selectedDataset == '':
			message = 'Select the model name in WamDam!!!'
		elif not ['xlsx', 'xlsm', 'xls'].__contains__(self.path.split('.')[-1]):
			message = 'And please select a valid excel file.'

		if message != '':
			messageDlg = msg_somethigWrong(None, msg=message)
			messageDlg.Show()
			return
			# raise Exception(message)

		''' get objecttypes, attibutes, datasetType'''
		result = GetDataStructure()
		data_result = result.getObjecttypes(selectedDataset)
		attributes_result = result.getAttributes(selectedDataset)
		dataset_result = result.getDatasetType(selectedDataset)
		print '************8**'
		try:
			if self.path.split('.')[-1] == 'xls':
				wb = open_workbook(self.path)
				# workbook = copy(wb)
				workbook = wb
				sheet = workbook.get_sheet(4)
				attribute_sheet = workbook.get_sheet(5)

				for row_id, row in enumerate(dataset_result):
					for col_id, cell in enumerate(row):
						sheet.write(row_id + 9, col_id + 0, cell)

				for row_id, row in enumerate(data_result):
					for col_id, cell in enumerate(row):
						sheet.write(row_id + 17, col_id + 0, cell)

				for row_id, row in enumerate(attributes_result):
					for col_id, cell in enumerate(row):
						attribute_sheet.write(row_id + 10, col_id + 0, cell)

				workbook.save(self.path)
			else:
				book2 = load_workbook(self.path)
				try:
					sheet = book2.get_sheet_by_name("2.1_Datasets&ObjectTypes")
					attribute_sheet = book2.get_sheet_by_name("2.2_Attributes")
				except:
					raise Exception('Output Sheet {} not found in Excel File \n\n Please select valid Excel File'.format("2.1_Datasets&ObjectTypes"))

				for row_id, row in enumerate(dataset_result):
					for col_id, cell in enumerate(row):
						sheet.cell(row=row_id + 10, column=col_id + 1, value=cell)
				for row_id, row in enumerate(data_result):
					for col_id, cell in enumerate(row):
						sheet.cell(row=row_id + 18, column=col_id + 1, value=cell)
				for row_id, row in enumerate(attributes_result):
					for col_id, cell in enumerate(row):
						attribute_sheet.cell(row=row_id + 11, column=col_id + 1, value=cell)

				book2.save(self.path)
			from Messages_forms.msg_successLoadDatabase import msg_successLoadDatabase
			instance = msg_successLoadDatabase(None)
			instance.m_staticText1.SetLabel("Success export excel file")
			instance.Show()
			self.Destroy()
		except Exception as e:
			print e
			messageDlg = msg_somethigWrong(None, msg=e.message)
			messageDlg.Show()
			raise Exception(e.message)

		print 'Great so far....'
	
	def btn_cancelOnButtonClick( self, event ):
		# TODO: Implement btn_cancelOnButtonClick
		self.Close()
	
	
