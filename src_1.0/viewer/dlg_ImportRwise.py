"""Subclass of dlg_ImportHydra, which is generated by wxFormBuilder."""

import wx, define, threading
import WaMDaMWizard
from Messages_forms.msg_somethigWrong import msg_somethigWrong
from controller.ConnectDB_ParseExcel import DB_Setup
from Messages_forms.msg_loadingToExit import msg_sureToExit
from controller.RWISE_importer import RWISE_importer

# Implementing dlg_ImportRwise
class dlg_ImportRwise( WaMDaMWizard.dlg_ImportRwise ):
    def __init__( self, parent ):
        WaMDaMWizard.dlg_ImportRwise.__init__( self, parent )
        self.path = ""
        self.wml_str = ""

    # Handlers for dlg_ImportRwise events.
    def FilePicker_RwiseFileOnFileChanged( self, event ):
        # TODO: Implement FilePicker_RwiseFileOnFileChanged
        valid_extension = ['wml']
        self.path = self.FilePicker_RwiseFile.GetPath()
        self.selectedWmlFileName = self.path.split('\\')[-1]

        if not (self.path.split('.')[-1] in valid_extension):
            self.Destroy()
            if define.logger != None:
                define.logger.error("A non wml file was selected, \n\n"
                                                  " Please select a valid wml File")
            message = msg_somethigWrong(None, msg="A non wml file was selected, \n\n"
                                                  " Please select a valid wml File")
            message.Show()
        else:
            if define.logger != None:
                define.logger.info("'" + self.selectedWmlFileName + "'was selected.\n")

    def btn_LoadRwiseFileOnButtonClick( self, event ):
        # TODO: Implement btn_LoadRwiseFileOnButtonClick
    # Read data(string type) from wml file.
        f = open(self.path, 'r')
        self.wml_str = f.read()
        # print self.wml_str
    #///////////////////////////////////////////
        if not self.check_validation():
            return

    # Show a msg to tell the user to wait.
        from viewer.Messages_forms.generalMsgDlg import messageDlg
        self.waiting_dlg = messageDlg(None)
        self.waiting_dlg.btn_OK.Shown = False
        self.waiting_dlg.Title = "Loading Data..."
        self.waiting_dlg.setMessage("Please wait a moment still loading is done.")
        self.waiting_dlg.btn_Cancel.Bind(wx.EVT_BUTTON, self.stop_loading)
        self.waiting_dlg.Show()
    #///////////////////////////////////////////////////////////////////////#
    # Start thread to load data
        self.our_thread = threading.Thread(None, self.load_data)
        self.our_thread.start()
    #///////////////////////////////////////////////////////////////////////#

    def load_data(self):
    # Load data within sqlite database
        importer = RWISE_importer()
        importer.load_data(self.wml_str)
    #////////////////////////////////////
    # Once our_thread is done, allone method is called
        wx.CallAfter(self.allDone)
    #///////////////////////////////////////////////////////////////////////#

    def allDone(self):
        self.waiting_dlg.Destroy()

    # Popup success message if loading RWISE  data within Sqlite db.
        from Messages_forms.msg_successLoadDatabase import msg_successLoadDatabase
        instance = msg_successLoadDatabase(None)
        instance.setMessageText(u"\n\nYou successfully loaded the RWISE data into " + define.dbName + u". \nYou can view the data by using: SQLite Manager: Add-ons for\nFirefox web browser")
        instance.ShowModal()
        instance.Destroy()
    #/////////////////////////////////////////////////////////////#

    def stop_loading(self, event):
        self.sure_dlg = msg_sureToExit(self.waiting_dlg, "Are you sure you want to cancel/stop data loading?")
        self.sure_dlg.btn_ok.Bind(wx.EVT_BUTTON, self.btn_cancelOnButtonClick)
        self.sure_dlg.Show()

    def btn_cancelOnButtonClick( self, event ):
        if self.our_thread != None and self.our_thread.isAlive():
            self.our_thread._Thread_stoped = True
        if self.sure_dlg != None:
            self.sure_dlg.Destroy()
            define.logger.error('the user canceled data loading and the Wizard reverted everything. Please load the file again.')

        if self.waiting_dlg != None: self.waiting_dlg.Destroy()
        self.Destroy()

    def check_validation(self):
    # Check whether user select needed item correctly
        from viewer.Messages_forms.generalMsgDlg import messageDlg
        msg = ""
        if self.path is None or self.path == "":
            msg = "Warning!\n Please select a valid wml file."
        elif self.wml_str is None or self.wml_str == "":
            msg = "Warning!\n The selected file could not be opened. Please select a valid wml file."
        if msg != "":
            instance = messageDlg(None)
            instance.setMessage(msg)
            instance.ShowModal()
            instance.Destroy()
            return False
    #///////////////////////////////////////////////////////////////////////#

    # Check whether Sqlite db is connected.
        setup = DB_Setup()
        if not setup.get_session():
            message = msg_somethigWrong(None, msg='\n\n\nError, No Database connection found, Please first connect to a database.')
            message.ShowModal()
            return False
    #///////////////////////////////////////////////////////////////////////#

        return True

