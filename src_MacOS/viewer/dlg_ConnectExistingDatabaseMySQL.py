"""Subclass of dlg_ConnectExistingDatabaseMySQL, which is generated by wxFormBuilder."""

import wx
import WaMDaMWizard, define
import MySQLdb as db
from controller.ConnectDB_ParseExcel import DB_Setup
from Messages_forms.msg_somethigWrong import msg_somethigWrong
from model import SqlAlchemy


# Implementing dlg_ConnectExistingDatabaseMySQL
class dlg_ConnectExistingDatabaseMySQL(WaMDaMWizard.dlg_ConnectExistingDatabaseMySQL):
    def __init__(self, parent):
        WaMDaMWizard.dlg_ConnectExistingDatabaseMySQL.__init__(self, parent)
        self.sql_string = None  # sql_string is the var used to hold the mysql connect string
        self.db_name = None
        self.topframe = wx.GetApp().GetTopWindow()


    def evaluator(self):
        """
        This method holds code common to testOnButtonClick and connectOnButtonClick.
        it return error if any or none
        :return: error
        """
        error = None
        # get all values from the wizard, host has a default value of null which represents local host.
        host = self.Server.GetValue()
        db_name = self.dbName.GetValue()
        username = self.username.GetValue()
        password = self.password.GetValue()

        self.db_name = db_name

        # defines a logger to log in information
        define.logger = define.create_logger(db_name)
        define.logger.name = __name__
        define.logger.info("Start database connection.")

        # test if all required parameters are filled
        if any(param == '' for param in [db_name, username, password]):
            return u'\n\n Error:: All fields are required'

        # build the mysql string to use in connection
        self.sql_string = str(username) + ':' + str(password) + '@' + str(host) + '/' + str(db_name)

        try:
            # used to test connection using python mysqldb library
            db_conn = db.connect(host=host, user=username, passwd=password, db=db_name)
        except db.Error as e:
            # Catches Sql error
            try:
                error = "MySQL Error [%d]: %s" % (e.args[0], e.args[1])
            except IndexError:
                error = "MySQL Error: %s" % str(e)

            # refines errors for users understanding
            if 'database' in error:
                error = 'MySQL Error::: Database not found, please enter correct database.'
            elif 'Access denied' in error:
                error = 'MySQL Error::: Wrong Username or Password, please check.'
            elif 'host' in error:
                error = 'MySQL Error::: Unknown MySQL Server, Please make sure \nserver name is correct and started'
        return error


    # Handlers for dlg_ConnectExistingDatabaseMySQL events.
    def btn_testOnButtonClick(self, event):
        """
        Used to test the connection given the user's credentials
        :param event: 
        :return: 
        """
        error = self.evaluator()
        if error:
            msg_somethigWrong(self.topframe, '\n\n' + error).Show()
        else:
            from Messages_forms.msg_connSQLiteSuccs import msg_connSQLiteSuccs
            msgdlg = msg_connSQLiteSuccs(self.topframe)
            msgdlg.setMessage(u"\n\nSuccessful connection to mysql db with name \'" + self.db_name + u"\'" +
                              u"\n\n Please click the button \'connect and save connection\'")
            msgdlg.Show()

    def btn_connectOnButtonClick(self, event):
        error = self.evaluator()
        if error:
            msg_somethigWrong(self.topframe, '\n\n' + error).Show()
            return

        else:
            setup = DB_Setup()

            # test if the user is already connected to a database, if so, user is asked to disconnect
            if setup.get_session():
                msg_somethigWrong(None, msg='\n\nError: You are already connected to a database. \n\n to use another'
                                            ' database, you need to disconnect from the current one').Show()
                return

            # connects to mysql database given the sql_string
            setup.connect('', db_type='mysql', sql_string=self.sql_string)

            self.topframe.SetTitle(self.topframe.GetTitle() + ' ::: You are connected to MySQL DB ' + self.db_name)

            from Messages_forms.msg_connSQLiteSuccs import msg_connSQLiteSuccs
            msgdlg = msg_connSQLiteSuccs(self.topframe)
            msgdlg.setMessage(u"\n\nSuccessfully connected to mysql db with name \'" + self.db_name + u"\'")
            msgdlg.Show()

            # Create WaMDaMVersion table and fills it the version number declared in define.py file
            obj_cat = SqlAlchemy.WaMDaMVersion()

            try:
                qeury = setup.get_session().query(SqlAlchemy.WaMDaMVersion).first().VersionNumber
            except:
                obj_cat.VersionNumber = define.version
                setup.push_data(obj_cat)
                setup.add_data()

            self.Close()

    def btn_cancelOnButtonClick(self, event):
        self.Close()
